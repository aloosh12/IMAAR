using Imaar.Shared;
using Imaar.UserProfiles;
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using Imaar.Permissions;
using Imaar.UserWorksExhibitions;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using Imaar.Shared;

namespace Imaar.UserWorksExhibitions
{
    public class UserWorksExhibitionsAppService : UserWorksExhibitionsAppServiceBase, IUserWorksExhibitionsAppService
    {
        //<suite-custom-code-autogenerated>
        public UserWorksExhibitionsAppService(IUserWorksExhibitionRepository userWorksExhibitionRepository, UserWorksExhibitionManager userWorksExhibitionManager, IDistributedCache<UserWorksExhibitionDownloadTokenCacheItem, string> downloadTokenCache, IRepository<Imaar.UserProfiles.UserProfile, Guid> userProfileRepository)
            : base(userWorksExhibitionRepository, userWorksExhibitionManager, downloadTokenCache, userProfileRepository)
        {
        }

        [Authorize(ImaarPermissions.UserWorksExhibitions.Create)]
        public virtual async Task<UserWorksExhibitionDto> CreateMobileAsync(UserWorksExhibitionMobileCreateDto input)
        {
            if (input.UserProfileId == default)
            {
                throw new UserFriendlyException(L["The {0} field is required.", L["UserProfile"]]);
            }

            var userWorksExhibition = await _userWorksExhibitionManager.CreateMobileAsync(
            input.UserProfileId, input.File, input.Order, input.Title
            );

            return ObjectMapper.Map<UserWorksExhibition, UserWorksExhibitionDto>(userWorksExhibition);
        }
    }
}