using Imaar.Shared;
using Imaar.Stories;
using Imaar.Vacancies;
using Imaar.ImaarServices;
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using Imaar.Permissions;
using Imaar.Medias;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using Imaar.Shared;
using Imaar.Medias;
using Imaar.Notifications;
using Volo.Abp.BlobStoring;

namespace Imaar.Medias
{
    public class MediasAppService : MediasAppServiceBase, IMediasAppService
    {
        private readonly IBlobContainer<MediaContainer> _mediaBlobContainer;
        //<suite-custom-code-autogenerated>
        public MediasAppService(IMediaRepository mediaRepository, MediaManager mediaManager, IDistributedCache<MediaDownloadTokenCacheItem, string> downloadTokenCache, IBlobContainer<MediaContainer> mediaBlobContainer)
            : base(mediaRepository, mediaManager, downloadTokenCache)
        {
            _mediaBlobContainer = mediaBlobContainer;
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
        public async Task<List<MediaDto>> BulkUpdateMediasAsync(MediaBulkUpdateDto input)
        {
            // Get all existing media for this source
            var existingMedias = await _mediaRepository.GetListAsync(
                sourceEntityType: input.SourceEntityType,
                sourceEntityId: input.SourceEntityId
            );

            var updatedMedias = new List<Media>();
            var existingMediaIds = existingMedias.Select(m => m.Id).ToList();
            var inputMediaIds = input.Medias.Select(m => m.Id).ToList();

            // Delete medias that are not in the input list
            var mediasToDelete = existingMedias.Where(m => !inputMediaIds.Contains(m.Id)).ToList();
            foreach (var media in mediasToDelete)
            {
                if (!media.File.IsNullOrEmpty() && await _mediaBlobContainer.ExistsAsync(media.File) )
                {
                    await _mediaBlobContainer.DeleteAsync(media.File);
                }
                await _mediaRepository.DeleteAsync(media.Id);
            }

            // Update existing and create new medias
            foreach (var mediaDto in input.Medias)
            {
                if (existingMediaIds.Contains(mediaDto.Id))
                {
                    if (!mediaDto.File.IsNullOrEmpty() && !mediaDto.FileContent.IsNullOrEmpty() && mediaDto.File != mediaDto.OldFileName)
                    {
                        if (!mediaDto.OldFileName.IsNullOrEmpty())
                            await _mediaBlobContainer.DeleteAsync(mediaDto.OldFileName);
                        await _mediaBlobContainer.SaveAsync(mediaDto.File, mediaDto.FileContent);
                    }
                    else
                    {
                        if (mediaDto.File.IsNullOrEmpty() && !mediaDto.OldFileName.IsNullOrEmpty())
                        {
                            await _mediaBlobContainer.DeleteAsync(mediaDto.OldFileName);
                        }
                    }

                    // Update existing media
                    var media = await _mediaManager.UpdateAsync(
                        mediaDto.Id,
                        mediaDto.File,
                        mediaDto.Order,
                        mediaDto.IsActive,
                        input.SourceEntityType,
                        input.SourceEntityId,
                        mediaDto.Title,
                        mediaDto.ConcurrencyStamp
                    );
                    updatedMedias.Add(media);
                }
                else
                {
                    await _mediaBlobContainer.SaveAsync(mediaDto.File, mediaDto.FileContent);
                    // Create new media
                    var media = await _mediaManager.CreateAsync(
                        mediaDto.File,
                        mediaDto.Order,
                        mediaDto.IsActive,
                        input.SourceEntityType,
                        input.SourceEntityId,
                        mediaDto.Title
                    );
                    updatedMedias.Add(media);
                }
            }

            return ObjectMapper.Map<List<Media>, List<MediaDto>>(updatedMedias);
        }
        [AllowAnonymous]
        public async Task<MediaDto> GetFirstMediaByEntityIdAsync(Guid entityId, MediaEntityType sourceEntityType)
        {
            var media = await _mediaRepository.FirstOrDefaultAsync(m => 
                m.SourceEntityId == entityId.ToString() && 
                m.SourceEntityType == sourceEntityType);
                
            return ObjectMapper.Map<Media, MediaDto>(media);
        }
    }
}