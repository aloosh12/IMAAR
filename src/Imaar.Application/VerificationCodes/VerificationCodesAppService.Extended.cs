using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp.Caching;
using Imaar.MobileResponses;
using System.Net.Http;
using Microsoft.Extensions.Configuration;
using Volo.Abp;
using Volo.Abp.Emailing;
using System.Net.Mail;
using System.Net;
using static Volo.Abp.Ui.LayoutHooks.LayoutHooks;

namespace Imaar.VerificationCodes
{
    [RemoteService(false)]
    public class VerificationCodesAppService : VerificationCodesAppServiceBase, IVerificationCodesAppService
    {
        protected IConfiguration _configuration;
        protected HttpClient _httpClient;
        protected IEmailSender _emailSender;
        //<suite-custom-code-autogenerated>
        public VerificationCodesAppService(IVerificationCodeRepository verificationCodeRepository, VerificationCodeManager verificationCodeManager, IDistributedCache<VerificationCodeDownloadTokenCacheItem, string> downloadTokenCache, IConfiguration configuration, HttpClient httpClient, IEmailSender emailSender)
            : base(verificationCodeRepository, verificationCodeManager, downloadTokenCache)
        {
            _configuration = configuration;
            _httpClient = httpClient;
            _emailSender = emailSender;
        }

        [AllowAnonymous]
        public async Task<MobileResponseDto> CreateMobileAsync(string input)
        {
            MobileResponseDto mobileResponse = new MobileResponseDto();

            if (input.IsNullOrWhiteSpace())
            {
                mobileResponse.Code = 400;
                mobileResponse.Message = "رقم الهاتف مطلوب";
                mobileResponse.Data = null;
                return mobileResponse;
            }
            Random random = new Random();
            int securityNum = random.Next(1000, 10000);
            //var client = new SmtpClient("sandbox.smtp.mailtrap.io", 2525)
            //{
            //    Credentials = new NetworkCredential("b50afd4f395d4e", "c22eb3baf68e8c"),
            //    EnableSsl = true
            //};             

            //var client = new SmtpClient("smtp.mailersend.net", 587)
            //{
            //    Credentials = new NetworkCredential("MS_07H7UB@test-dnvo4d9mp7ng5r86.mlsender.net", "mssp.NofcL8g.z86org8dp10lew13.A5Ui0J2"),
            //    EnableSsl = true
            //};
            //var client = new SmtpClient("smtp.freesmtpservers.com", 25)
            //{
            //    //Credentials = new NetworkCredential("b50afd4f395d4e", "c22eb3baf68e8c"),
            //    //EnableSsl = true
            //};
            //var mailMessage = new MailMessage
            //{
            //    From = new MailAddress("MS_07H7UB@test-dnvo4d9mp7ng5r86.mlsender.ne"),
            //    Subject = "Security Code",
            //    Body = securityNum.ToString(),
            //    IsBodyHtml = false // Set to false for plain text
            //};
            //mailMessage.To.Add("AliThirdOne@gmail.com");

            //client.Send(mailMessage);

            //  client.Send("adaioob@gmail.com", "AliThirdOne@gmail.com", "Hello world", "testbody");
            //  await _emailSender.SendAsync(input, "Security Code", securityNum.ToString(), false);
            var apiKey = _configuration["CallMeBot:ApiKey"];
            var url = $"https://api.callmebot.com/whatsapp.php?phone={input}&text={Uri.EscapeDataString(securityNum.ToString())}&apikey={apiKey}";

            var response = await _httpClient.GetAsync(url);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Failed to send WhatsApp message.");
                mobileResponse.Code = 501;
                mobileResponse.Message = "Failed to send WhatsApp message.";
                mobileResponse.Data = null;
                return mobileResponse;
            }

            var verificationCode = await _verificationCodeManager.CreateAsync(input, securityNum, false);
            if(verificationCode == null)
            {
                mobileResponse.Code = 400;
                mobileResponse.Message = "خطأ أثناء توليد الرقم";
                mobileResponse.Data = null;
                return mobileResponse;
            }
            mobileResponse.Code = 200;
            mobileResponse.Message = "Success";
            mobileResponse.Data = securityNum.ToString();
            return mobileResponse;

        }

        [AllowAnonymous]
        public async Task<bool> VerifyMobileAsync(VerificationCodeDto input)
        {
            var items = await _verificationCodeRepository.GetListAsync(phoneNumber: input.PhoneNumber, securityCodeMin: input.SecurityCode, securityCodeMax: input.SecurityCode, isFinish: false);
            if (items != null && items.Count > 0)
                return true;
            return false;

        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
    }
}