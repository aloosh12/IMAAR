using Imaar.UserProfiles;
using Imaar.UserProfiles;
using Imaar.UserProfiles;
using System;
using Volo.Abp.Domain.Services;
using Volo.Abp.Domain.Repositories;
using Volo.Abp.Data;
using Volo.Abp.Identity;
using Imaar.MobileResponses;
using System.Threading.Tasks;
using Volo.Abp;
using System.Linq;
using Volo.Abp.Users;

namespace Imaar.UserProfiles
{
    public class UserProfileManager : UserProfileManagerBase
    {
        //<suite-custom-code-autogenerated>
        public UserProfileManager(IUserProfileRepository userProfileRepository, IdentityUserManager identityUserManager, IIdentityUserRepository identityUserRepository, IDataFilter dataFilter)
            : base(userProfileRepository, identityUserManager, identityUserRepository, dataFilter)
        {
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...

        public virtual async Task<MobileResponse> CreatWithDetialsAsync(string firstName, string lastName, string phoneNumber, string email, string password, string securityCode, BiologicalSex? biologicalSex = null, DateOnly? dateOfBirth = null, string? latitude = null, string? longitude = null, string? profilePhoto = null)
        {
            MobileResponse mobileResponse = new MobileResponse();
            Check.NotNullOrWhiteSpace(firstName, nameof(firstName));
            Check.NotNullOrWhiteSpace(lastName, nameof(lastName));
            Check.NotNullOrWhiteSpace(phoneNumber, nameof(phoneNumber));
            Check.NotNullOrWhiteSpace(email, nameof(email));

            using (_dataFilter.Disable<ISoftDelete>())
            {
                try
                {

                    var users = await _identityUserRepository.GetListAsync();
                    var user = users.FirstOrDefault(u => u.PhoneNumber == phoneNumber || u.Email == email);
                    if (user != null)
                    {
                        var identityUser = new Volo.Abp.Identity.IdentityUser(user.Id, email.Split("@")[0], user.Email);
                        identityUser.Name = firstName;
                        identityUser.Surname = lastName;
                        identityUser.SetPhoneNumber(phoneNumber, false);
                        if (user.IsDeleted == true)
                            identityUser.IsDeleted = false;
                        var test = await _identityUserRepository.UpdateAsync(identityUser, true);
                        var userProfile = new UserProfile(identityUser.Id, securityCode, biologicalSex, dateOfBirth, latitude, longitude, profilePhoto);

                        var userProf = await _userProfileRepository.UpdateAsync(userProfile);
                    }
                    else
                    {
                        var identityUser = new Volo.Abp.Identity.IdentityUser(Guid.NewGuid(), email.Split("@")[0], email);
                        identityUser.Name = firstName;
                        identityUser.Surname = lastName;
                        identityUser.SetPhoneNumber(phoneNumber, false);
                        var result = await _identityUserManager.CreateAsync(identityUser, password, false);

                        if (result.Succeeded)
                        {
                            //Random random = new Random();
                            //int securityNum = random.Next(1000, 10000);
                            var userProfile = new UserProfile(identityUser.Id, securityCode, biologicalSex, dateOfBirth, latitude, longitude, profilePhoto);

                            var userProf = await _userProfileRepository.InsertAsync(userProfile);
                        }
                        else
                        {
                            mobileResponse.Code = 501;
                            mobileResponse.Message = result.ToString();
                            mobileResponse.Data = null;

                            return mobileResponse;
                            //throw new Volo.Abp.BusinessException(message: result.ToString());
                        }
                    }
                    var register = new RegisterResponse()
                    {
                        FirstName = firstName,
                        LastName = lastName,
                        PhoneNumber = phoneNumber,
                        Email = email,
                        SecurityCode = securityCode,
                        BiologicalSex = biologicalSex,
                        DateOfBirth = dateOfBirth,
                        Password = password,
                        Latitude = latitude,
                        Longitude = longitude,
                        ProfilePhoto = profilePhoto
                    };
                    mobileResponse.Code = 200;
                    mobileResponse.Message = "SUCCESS";
                    mobileResponse.Data = register;
                    return mobileResponse;
                }
                catch (Exception e)
                {
                    mobileResponse.Code = 501;
                    mobileResponse.Message = "Internal server error";
                    mobileResponse.Data = null;
                    return mobileResponse;
                }
            }
        }

    }
}