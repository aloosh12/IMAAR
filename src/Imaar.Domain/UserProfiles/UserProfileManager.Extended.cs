using Imaar.UserProfiles;
using Imaar.UserProfiles;
using Imaar.UserProfiles;
using System;
using Volo.Abp.Domain.Services;
using Volo.Abp.Domain.Repositories;
using Volo.Abp.Data;
using Volo.Abp.Identity;
using Imaar.MobileResponses;
using System.Threading.Tasks;
using Volo.Abp;
using System.Linq;
using Volo.Abp.Users;
using Microsoft.AspNetCore.Http;
using Volo.Abp.VirtualFileSystem;
using System.IO;
using Volo.Abp.BlobStoring;

namespace Imaar.UserProfiles
{
    public class UserProfileManager : UserProfileManagerBase
    {
        //<suite-custom-code-autogenerated>
        public UserProfileManager(IUserProfileRepository userProfileRepository, IdentityUserManager identityUserManager, IIdentityUserRepository identityUserRepository, IDataFilter dataFilter, IBlobContainer<UserProfileContainer> userProfileContainer)
            : base(userProfileRepository, identityUserManager, identityUserRepository, dataFilter, userProfileContainer)
        {
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...

        public virtual async Task<MobileResponse> CreatWithDetialsAsync(string firstName, string lastName, string phoneNumber, string email, string password, string securityCode, BiologicalSex? biologicalSex, DateOnly dateOfBirth, string latitude, string longitude, IFormFile profilePhoto, string roleName)
        {
            MobileResponse mobileResponse = new MobileResponse();
            Check.NotNullOrWhiteSpace(firstName, nameof(firstName));
            Check.NotNullOrWhiteSpace(lastName, nameof(lastName));
            Check.NotNullOrWhiteSpace(phoneNumber, nameof(phoneNumber));
            Check.NotNullOrWhiteSpace(email, nameof(email));

            try
            {
                string imageName = "";
                var users = await _identityUserRepository.GetListAsync();
                var existingUser = users.FirstOrDefault(u => u.Email == email);
                if (existingUser != null)
                {
                    mobileResponse.Code = 501;
                    mobileResponse.Message = "Email already exists.";
                    mobileResponse.Data = null;
                    return mobileResponse;
                }

                var identityUser = new Volo.Abp.Identity.IdentityUser(Guid.NewGuid(), email.Split("@")[0], email);
                identityUser.Name = firstName;
                identityUser.Surname = lastName;
                string formattedPhoneNumber = phoneNumber.StartsWith("+") ? phoneNumber : "+963" + phoneNumber;
                identityUser.SetPhoneNumber(formattedPhoneNumber, false);
                if (roleName.Trim() == "1")
                    identityUser.AddRole(Guid.Parse("84840acb-9a32-4fc8-7b98-3a19d056874e"));
                if (roleName.Trim() == "2")
                    identityUser.AddRole(Guid.Parse("3454fc01-7d85-48cf-9d7d-3a19d0565a75"));

                var result = await _identityUserManager.CreateAsync(identityUser, password, false);

                if (result.Succeeded)
                {
                    imageName = await uploadImage(profilePhoto);
                    var userProfile = new UserProfile(
            identityUser.Id,
            securityCode, firstName, lastName, phoneNumber, email, biologicalSex, dateOfBirth, latitude, longitude, imageName
            );
                    //var userProfile = new UserProfile(identityUser.Id, securityCode, biologicalSex, dateOfBirth, latitude, longitude, imageName);
                    var userProf = await _userProfileRepository.InsertAsync(userProfile);
                }
                else
                {
                    mobileResponse.Code = 501;
                    mobileResponse.Message = result.ToString();
                    mobileResponse.Data = null;
                    return mobileResponse;
                }

                var register = new RegisterResponse()
                {
                    Id = identityUser.Id.ToString(),
                    FirstName = firstName,
                    LastName = lastName,
                    PhoneNumber = formattedPhoneNumber,
                    Email = email,
                    SecurityCode = securityCode,
                    BiologicalSex = biologicalSex,
                    DateOfBirth = dateOfBirth,
                    Password = password,
                    Latitude = latitude,
                    Longitude = longitude,
                    ProfilePhoto = $"{MimeTypes.MimeTypeMap.GetAttachmentPath()}/UserProfileImages/{imageName}",
                    RoleId = roleName
                };
                mobileResponse.Code = 200;
                mobileResponse.Message = "SUCCESS";
                mobileResponse.Data = register;
                return mobileResponse;
            }
            catch (Exception e)
            {
                mobileResponse.Code = 501;
                mobileResponse.Message = "Internal server error";
                mobileResponse.Data = null;
                return mobileResponse;
            }
        }

        public virtual async Task<MobileResponse> UpdateWithDetailsAsync(string userId, string firstName, string lastName, string phoneNumber, string email, BiologicalSex? biologicalSex, IFormFile? profilePhoto)
        {
            MobileResponse mobileResponse = new MobileResponse();
            Check.NotNullOrWhiteSpace(firstName, nameof(firstName));
            Check.NotNullOrWhiteSpace(lastName, nameof(lastName));
            Check.NotNullOrWhiteSpace(phoneNumber, nameof(phoneNumber));
            Check.NotNullOrWhiteSpace(email, nameof(email));

            try
            {
                string imageName = "";
                var user = await _identityUserManager.FindByIdAsync(userId);
                if (user == null)
                {
                    mobileResponse.Code = 404;
                    mobileResponse.Message = "User not found.";
                    mobileResponse.Data = null;
                    return mobileResponse;
                }

                // Check if email exists for a different user
                var existingUserWithEmail = await _identityUserManager.FindByEmailAsync(email);
                if (existingUserWithEmail != null && existingUserWithEmail.Id != user.Id)
                {
                    mobileResponse.Code = 400;
                    mobileResponse.Message = "Email is already in use by another user.";
                    mobileResponse.Data = null;
                    return mobileResponse;
                }

                // Check if phone number exists for a different user
                var users = await _identityUserRepository.GetListAsync();
                string formattedPhoneNumber = phoneNumber.StartsWith("+") ? phoneNumber : "+" + phoneNumber;
                var existingUserWithPhone = users.FirstOrDefault(u => u.PhoneNumber == formattedPhoneNumber && u.Id != user.Id);
                if (existingUserWithPhone != null)
                {
                    mobileResponse.Code = 400;
                    mobileResponse.Message = "Phone number is already in use by another user.";
                    mobileResponse.Data = null;
                    return mobileResponse;
                }

                // Update identity user
                user.Name = firstName;
                user.Surname = lastName;
                user.SetPhoneNumber(formattedPhoneNumber, false);
                await _identityUserManager.SetEmailAsync(user, email);

                // Update roles if needed
                //var currentRoles = await _identityUserManager.GetRolesAsync(user);
                //if (roleName.Trim() == "1" && !currentRoles.Contains("1"))
                //{
                //    await _identityUserManager.RemoveFromRolesAsync(user, currentRoles);
                //    await _identityUserManager.AddToRoleAsync(user, "1");
                //}
                //else if (roleName.Trim() == "2" && !currentRoles.Contains("2"))
                //{
                //    await _identityUserManager.RemoveFromRolesAsync(user, currentRoles);
                //    await _identityUserManager.AddToRoleAsync(user, "2");
                //}

                var result = await _identityUserManager.UpdateAsync(user);

                if (result.Succeeded)
                {
                    // Update profile photo if provided
                    imageName = await uploadImage(profilePhoto);
                    // Update user profile
                    var userProfile = await _userProfileRepository.GetAsync(user.Id);
                    if (userProfile != null)
                    {
                        userProfile.BiologicalSex = biologicalSex;
                        if (!string.IsNullOrEmpty(imageName))
                        {
                            userProfile.ProfilePhoto = imageName;
                        }
                        await _userProfileRepository.UpdateAsync(userProfile);
                    }

                    mobileResponse.Code = 200;
                    mobileResponse.Message = "User updated successfully.";
                    mobileResponse.Data = user.Id;
                }
                else
                {
                    mobileResponse.Code = 501;
                    mobileResponse.Message = result.ToString();
                    mobileResponse.Data = null;
                }
            }
            catch (Exception e)
            {
                mobileResponse.Code = 501;
                mobileResponse.Message = "Internal server error: " + e.Message;
                mobileResponse.Data = null;
            }

            return mobileResponse;
        }

        private async Task<string> uploadImage(IFormFile? formFile)
        {
            if(formFile == null)
                return "default-user-profile-img.png";
            using (var stream = new MemoryStream())
            {
                formFile.CopyTo(stream);
                string imageName = $"{Guid.NewGuid().ToString("N")}{Path.GetExtension(formFile.FileName)}";
                await _userProfileContainer.SaveAsync(imageName, stream.GetAllBytes());
                return imageName;
            }
        }

    }
}