using Imaar.MainAmenities;
using Imaar.SecondaryAmenities;
using Imaar.MainAmenities;
using Imaar.SecondaryAmenities;
using Imaar.MainAmenities;
using Imaar.SecondaryAmenities;
using Imaar.MainAmenities;
using Imaar.SecondaryAmenities;
using Imaar.MainAmenities;
using Imaar.SecondaryAmenities;
using Imaar.MainAmenities;
using Imaar.SecondaryAmenities;
using System;
using Volo.Abp.Domain.Services;
using Volo.Abp.Domain.Repositories;
using System.Threading.Tasks;
using Volo.Abp;
using Microsoft.AspNetCore.Http;
using System.IO;
using Volo.Abp.BlobStoring;
using System.Collections.Generic;
using Imaar.MobileResponses;
using Imaar.Medias;
using Imaar.MimeTypes;

namespace Imaar.Buildings
{
    public class BuildingManager : BuildingManagerBase
    {
        protected IBlobContainer<MediaContainer> _mediasContainer;
        protected IMediaRepository _mediaRepository;
        protected MediaManager _mediaManager;
        
        public BuildingManager(IBuildingRepository buildingRepository,
        IRepository<MainAmenity, Guid> mainAmenityRepository,
            IRepository<SecondaryAmenity, Guid> secondaryAmenityRepository,
            IBlobContainer<MediaContainer> mediasContainer,
            IMediaRepository mediaRepository,
            MediaManager mediaManager)
            : base(buildingRepository, mainAmenityRepository, secondaryAmenityRepository)
        {
            _mediasContainer = mediasContainer;
            _mediaRepository = mediaRepository;
            _mediaManager = mediaManager;
        }
        //</suite-custom-code-autogenerated>

        public virtual async Task<MobileResponse> CreateWithFilesAsync(
            string mainTitle, 
            string description,
            string price,
            string buildingArea,
            string numberOfRooms,
            string numberOfBaths,
            string floorNo,
            Guid regionId,
            Guid furnishingLevelId,
            Guid buildingFacadeId,
            Guid serviceTypeId,
            Guid userProfileId,
            List<Guid> mainAmenityIds,
            List<Guid> secondaryAmenityIds,
            List<IFormFile> files)
        {
            MobileResponse mobileResponse = new MobileResponse();
            
            try
            {
                // Create the building first
                var building = await CreateAsync(
                    mainAmenityIds, 
                    secondaryAmenityIds,
                    regionId,
                    furnishingLevelId, 
                    buildingFacadeId, 
                    serviceTypeId,
                    userProfileId,
                    mainTitle, 
                    description, 
                    price,
                    buildingArea,
                    numberOfRooms,
                    numberOfBaths,
                    floorNo,
                    0,
                    0
                );
                
                // Process each file
                var fileNames = new List<string>();
                int order = 0;
                
                foreach (var file in files)
                {
                    string fileName = await UploadImage(file);
                    fileNames.Add($"{MimeTypeMap.GetAttachmentPath()}/MediaImages/{fileName}");

                    // Create media entry for each file
                    await _mediaManager.CreateAsync(
                        fileName,
                        order++,
                        true,
                        MediaEntityType.Building,
                        building.Id.ToString(),
                        mainTitle
                    );
                }
                
                mobileResponse.Code = 200;
                mobileResponse.Message = "Building created successfully";
                mobileResponse.Data = new { BuildingId = building.Id, FileNames = fileNames };
                
                return mobileResponse;
            }
            catch (Exception ex)
            {
                mobileResponse.Code = 500;
                mobileResponse.Message = ex.Message;
                mobileResponse.Data = null;
                return mobileResponse;
            }
        }

        private async Task<string> UploadImage(IFormFile formFile)
        {
            using (var stream = new MemoryStream())
            {
                formFile.CopyTo(stream);
                string imageName = $"{Guid.NewGuid().ToString("N")}{Path.GetExtension(formFile.FileName)}";
                await _mediasContainer.SaveAsync(imageName, stream.GetAllBytes());
                return imageName;
            }
        }
    }
}