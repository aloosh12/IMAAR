

@page "/categories"

@attribute [Authorize(ImaarPermissions.Categories.Default)]
@using Imaar.Categories
@using Imaar.Localization
@using Imaar.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Imaar.ServiceTypes 

@using Imaar.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits ImaarComponentBase
@inject ICategoriesAppService CategoriesAppService
@inject IServiceTypesAppService ServiceTypesAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<ImaarResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Categories"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
@*//<suite-custom-code-block-1>*@
@*//</suite-custom-code-block-1>*@
        <Row>
            <div class="col-md-8 col-lg-10">
                <div class="mb-3">
                    <Form id="CategorySearchForm">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@Filter.FilterText"
                                        Autofocus="true"
                                        Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="CategorySearchForm" Clicked="GetCategoriesAsync">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                </div>
            </div>
                
                   <div class="col-md-4 col-lg-2">
            <div class="mb-3">
               <Button Color="Color.Primary" Outline Style="width:100%" id="AdvancedFilterSectionToggler"
                         Clicked="@(() => ShowAdvancedFilters = !ShowAdvancedFilters)">@L["Filters"]
                         <i aria-hidden="true" class="fa ms-1 @(!ShowAdvancedFilters ? "fa-angle-down" : "fa-angle-up")"></i>
               </Button>
            </div>
       </div>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")"  class="mt-3">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Title"]</FieldLabel>
                        <TextEdit Text="@Filter.Title" TextChanged="@OnTitleChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinOrder"]</FieldLabel>
                        <NumericEdit TValue="int?" 
             Value="@Filter.OrderMin"
             ValueChanged="@OnOrderMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxOrder"]</FieldLabel>
                        <NumericEdit TValue="int?" 
             Value="@Filter.OrderMax"
             ValueChanged="@OnOrderMaxChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["IsActive"]</FieldLabel>
                        <Select TValue="bool?"
		SelectedValue="@Filter.IsActive"
		SelectedValueChanged="@OnIsActiveChangedAsync">

<SelectItem></SelectItem>
<SelectItem Value="true">@L["Yes"]</SelectItem>
<SelectItem Value="false">@L["No"]</SelectItem>

</Select>                       
                    </Field>
                </Column>
            </Row>
@*//<suite-custom-code-block-2>*@
@*//</suite-custom-code-block-2>*@
        </div>

        </Row>

@*//<suite-custom-code-block-3>*@
@*//</suite-custom-code-block-3>*@
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>        
        @if (SelectedCategories.Any())
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                @if (AllCategoriesSelected)
                {
                    <p class="lead mb-0">
                        @L["AllItemsAreSelected", TotalCount]
                    </p>
                }
                else
                {
                    <p class="lead mb-0">
                        @if (SelectedCategories.Count > 1)
                        {
                            @L["NumberOfItemsOnThisPageAreSelected", SelectedCategories.Count]
                        }
                        else
                        {
                            @L["OneItemOnThisPageIsSelected"]
                        }
                    </p>
                }
                    
                <div>
                    @if ((SelectedCategories.Count == PageSize || SelectedCategories.Count == CategoryList.Count) && TotalCount > SelectedCategories.Count)
                    {
                        if (!AllCategoriesSelected)
                        {
                            <Button Clicked="SelectAllItems" Class="mx-1 btn-outline-secondary">@L["SelectAllItems", TotalCount]</Button>
                        }
                        else
                        {
                            <Button Clicked="ClearSelection" Class="mx-1 btn-outline-secondary">@L["ClearSelection"]</Button>
                        }
                    }
                    
                    <Button Color="Color.Danger" Class="mx-1" Size="Size.Medium" Clicked="DeleteSelectedCategoriesAsync">
                        <Icon Name="@IconName.Delete" /> @L["Delete"]
                    </Button>
                </div>
            </div>
            
            <hr class="my-1 mx-0"/>
        }
        <DataGrid TItem="CategoryDto"
                  Data="CategoryList"
                  
                  SelectionMode="DataGridSelectionMode.Multiple"
                  SelectedRows="SelectedCategories"
                  RowSelectable="@((args) => CanDeleteCategory)"
                  SelectedRowsChanged="SelectedCategoryRowsChanged"
                  DetailRowTrigger="@((x) => { x.Single = true; return ShouldShowDetailRow(); })"
                  DetailRowStartsVisible="false"
                  RowClicked="@((e) => { if (e.Item.Id == SelectedCategory?.Id) { SelectedCategory = null; } else { SelectedCategory = e.Item; } })"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                       <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>   
            <DataGridColumns>
                
                @if (CanDeleteCategory && CategoryList.Any())
                {
                    <DataGridMultiSelectColumn TItem="CategoryDto" DisplayOrder="-1" Width="30px"></DataGridMultiSelectColumn>
                }
                @if (ShouldShowDetailRow())
                {
                    <DataGridColumn TItem="CategoryDto"
                                    Field="Id"
                                    Width="0.5rem">
                        <DisplayTemplate>
                            @if (context.Id == SelectedCategory?.Id)
                            {
                                <i class="fas fa-chevron-up"/>
                            }
                            else
                            {
                                <i class="fas fa-chevron-down"/>
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                }
                <DataGridEntityActionsColumn TItem="CategoryDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="CategoryDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="CategoryDto"
                                          Visible="@CanEditCategory"
                                          Clicked="async () => await OpenEditCategoryModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="CategoryDto"
                                          Visible="@CanDeleteCategory"
                                          Clicked="() => DeleteCategoryAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
@*//<suite-custom-code-block-4>*@
@*//</suite-custom-code-block-4>*@
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="CategoryDto"
                      Field="Title"
                      Caption="@L["Title"]">
              </DataGridColumn>

              <DataGridColumn TItem="CategoryDto"
                      Field="Order"
                      Caption="@L["Order"]">
              </DataGridColumn>

              <DataGridColumn TItem="CategoryDto"
                      Field="IsActive"
                      Caption="@L["IsActive"]">
                    <DisplayTemplate>
                        @if (context.IsActive)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


            </DataGridColumns>
            
            <DetailRowTemplate>
    <div class="bg-light rounded p-3 pb-0 pt-1">
        <Tabs SelectedTab="@SelectedChildTab" SelectedTabChanged="@OnSelectedChildTabChanged">
            <Items>
                <Tab Name="servicetype-tab">@L["ServiceTypes"]</Tab>
            </Items>
            
            <Content>
                                        <TabPanel Name="servicetype-tab" Class="mt-0">
                            @if (CanCreateServiceType)
                            {
                                <Row Class="mb-2">
                                    <Column Class="d-flex justify-content-end">
                                        <Button Color="Color.Primary" Clicked="async () => await OpenCreateServiceTypeModalAsync(context.Id)">
                                            <i class="fas fa-plus me-1"></i>@L["NewServiceType"]
                                        </Button>
                                    </Column>
                                </Row>
                            }

                            @{
                                var serviceTypes = (context as CategoryDto).ServiceTypes;

                                <DataGrid @ref="@ServiceTypeDataGrids[context.Id]"
                                          TItem="ServiceTypeDto"
                                          Data="serviceTypes"
                                          ReadData="@((args) => OnServiceTypeDataGridReadAsync(args, context.Id))"
                                          Sortable="true"
                                          ShowCaptions="true"
                                          ShowPager="true"
                                          Responsive="true"
                                          PageSize="ServiceTypePageSize">

                                    <DataGridColumns>

                                        <DataGridEntityActionsColumn TItem="ServiceTypeDto" @ref="@ServiceTypeEntityActionsColumns">
                                            <DisplayTemplate Context="service_type_context">
                                                <EntityActions TItem="ServiceTypeDto" EntityActionsColumn="@ServiceTypeEntityActionsColumns">
                                                    <EntityAction TItem="ServiceTypeDto"
                                                                  Visible="@CanEditServiceType"
                                                                  Clicked="async () => await OpenEditServiceTypeModalAsync(service_type_context)"
                                                                  Text="@L["Edit"]">
                                                    </EntityAction>
                                                    <EntityAction TItem="ServiceTypeDto"
                                                                  Visible="@CanDeleteServiceType"
                                                                  Clicked="async () => await DeleteServiceTypeAsync(service_type_context)"
                                                                  ConfirmationMessage="@(() => L["DeleteConfirmationMessage"])"
                                                                  Text="@L["Delete"]">
                                                    </EntityAction>
                                                </EntityActions>
                                            </DisplayTemplate>
                                        </DataGridEntityActionsColumn>

                                        <DataGridCommandColumn/>

                                        
              <DataGridColumn TItem="ServiceTypeDto"
                      Field="Title"
                      Caption="@L["Title"]">
              </DataGridColumn>

              <DataGridColumn TItem="ServiceTypeDto"
                      Field="Icon"
                      Caption="@L["Icon"]">
              </DataGridColumn>

              <DataGridColumn TItem="ServiceTypeDto"
                      Field="Order"
                      Caption="@L["Order"]">
              </DataGridColumn>

              <DataGridColumn TItem="ServiceTypeDto"
                      Field="IsActive"
                      Caption="@L["IsActive"]">
                    <DisplayTemplate Context="service_type_context">
                        @if (service_type_context.IsActive)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


                                    </DataGridColumns>
                                </DataGrid>
                            }
                        </TabPanel>
            </Content>
        </Tabs>
    </div>
</DetailRowTemplate>
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateCategoryModal" Closing="@CreateCategoryModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-5>*@
@*//</suite-custom-code-block-5>*@
        <Form id="CreateCategoryForm">
            <ModalHeader>
                <ModalTitle>@L["NewCategory"]</ModalTitle>
                <CloseButton Clicked="CloseCreateCategoryModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewCategoryValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewCategory"
                            ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewCategory.Title"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Icon"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewCategory.Icon"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Order"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@NewCategory.Order"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewCategory.IsActive" >@L["IsActive"]</Check>
                    </Field>

                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateCategoryModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateCategoryForm" Clicked="CreateCategoryAsync"/>
@*//<suite-custom-code-block-6>*@
@*//</suite-custom-code-block-6>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-7>*@
@*//</suite-custom-code-block-7>*@
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditCategoryModal" Closing="@EditCategoryModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-8>*@
@*//</suite-custom-code-block-8>*@
        <Form id="EditCategoryForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditCategoryModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingCategoryValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingCategory"
                            ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingCategory.Title"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Icon"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingCategory.Icon"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Order"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@EditingCategory.Order"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingCategory.IsActive" >@L["IsActive"]</Check>
                    </Field>

                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditCategoryModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditCategoryForm" Clicked="UpdateCategoryAsync" />
@*//<suite-custom-code-block-9>*@
@*//</suite-custom-code-block-9>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-10>*@
@*//</suite-custom-code-block-10>*@
    </ModalContent>
</Modal>

@* ************************* ServiceType: CREATE MODAL ************************* *@
<Modal @ref="CreateServiceTypeModal" Closing="@CreateServiceTypeModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateServiceTypeForm">
            <ModalHeader>
                <ModalTitle>@L["NewServiceType"]</ModalTitle>
                <CloseButton Clicked="CloseCreateServiceTypeModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewServiceTypeValidations"
                             Mode="ValidationMode.Auto"
                             Model="@NewServiceType"
                             ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewServiceType.Title"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Icon"]</FieldLabel>
                            <TextEdit @bind-Text="@NewServiceType.Icon"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Order"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@NewServiceType.Order"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewServiceType.IsActive" >@L["IsActive"]</Check>
                    </Field>

                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateServiceTypeModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateServiceTypeForm" Clicked="CreateServiceTypeAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* ServiceType: EDIT MODAL ************************* *@
<Modal @ref="EditServiceTypeModal" Closing="@EditServiceTypeModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditServiceTypeForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditServiceTypeModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingServiceTypeValidations"
                             Mode="ValidationMode.Auto"
                             Model="@EditingServiceType"
                             ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingServiceType.Title"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Icon"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingServiceType.Icon"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Order"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@EditingServiceType.Order"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingServiceType.IsActive" >@L["IsActive"]</Check>
                    </Field>

                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditServiceTypeModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditServiceTypeForm" Clicked="UpdateServiceTypeAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>