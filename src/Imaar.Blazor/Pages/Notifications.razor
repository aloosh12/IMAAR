

@page "/notifications"

@attribute [Authorize(ImaarPermissions.Notifications.Default)]
@using Imaar.Notifications
@using Imaar.Localization
@using Imaar.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using Imaar.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits ImaarComponentBase
@inject INotificationsAppService NotificationsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<ImaarResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@using Imaar.Notifications


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Notifications"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
@*//<suite-custom-code-block-1>*@
@*//</suite-custom-code-block-1>*@
        <Row>
            <div class="col-md-8 col-lg-10">
                <div class="mb-3">
                    <Form id="NotificationSearchForm">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@Filter.FilterText"
                                        Autofocus="true"
                                        Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="NotificationSearchForm" Clicked="GetNotificationsAsync">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                </div>
            </div>
                
                   <div class="col-md-4 col-lg-2">
            <div class="mb-3">
               <Button Color="Color.Primary" Outline Style="width:100%" id="AdvancedFilterSectionToggler"
                         Clicked="@(() => ShowAdvancedFilters = !ShowAdvancedFilters)">@L["Filters"]
                         <i aria-hidden="true" class="fa ms-1 @(!ShowAdvancedFilters ? "fa-angle-down" : "fa-angle-up")"></i>
               </Button>
            </div>
       </div>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")"  class="mt-3">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Title"]</FieldLabel>
                        <TextEdit Text="@Filter.Title" TextChanged="@OnTitleChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Message"]</FieldLabel>
                        <TextEdit Text="@Filter.Message" TextChanged="@OnMessageChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["IsRead"]</FieldLabel>
                        <Select TValue="bool?"
		SelectedValue="@Filter.IsRead"
		SelectedValueChanged="@OnIsReadChangedAsync">

<SelectItem></SelectItem>
<SelectItem Value="true">@L["Yes"]</SelectItem>
<SelectItem Value="false">@L["No"]</SelectItem>

</Select>                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinReadDate"]</FieldLabel>
                        <DatePicker TValue="DateTime?"
            InputMode="DateInputMode.Date"
            Date="@Filter.ReadDateMin"
            DateChanged="@OnReadDateMinChangedAsync"
            Placeholder="@string.Empty" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxReadDate"]</FieldLabel>
                        <DatePicker TValue="DateTime?"
            InputMode="DateInputMode.Date"
            Date="@Filter.ReadDateMax"
            DateChanged="@OnReadDateMaxChangedAsync"
            Placeholder="@string.Empty" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinPriority"]</FieldLabel>
                        <NumericEdit TValue="int?" 
             Value="@Filter.PriorityMin"
             ValueChanged="@OnPriorityMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxPriority"]</FieldLabel>
                        <NumericEdit TValue="int?" 
             Value="@Filter.PriorityMax"
             ValueChanged="@OnPriorityMaxChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["SourceEntityType"]</FieldLabel>
                        <Select TValue="SourceEntityType?"
		SelectedValue="@Filter.SourceEntityType"
		SelectedValueChanged="@OnSourceEntityTypeChangedAsync">

<SelectItem></SelectItem>

@foreach(SourceEntityType value in Enum.GetValues(typeof(SourceEntityType)))
{
	<SelectItem Value="value">
		@value
	</SelectItem>
}

</Select>                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["SourceEntityId"]</FieldLabel>
                        <TextEdit Text="@Filter.SourceEntityId" TextChanged="@OnSourceEntityIdChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["SenderUserId"]</FieldLabel>
                        <TextEdit Text="@Filter.SenderUserId" TextChanged="@OnSenderUserIdChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["UserProfile"]</FieldLabel>
                        <Select TValue="Guid?"
		SelectedValue="@Filter.UserProfileId"
		SelectedValueChanged="@OnUserProfileIdChangedAsync">

<SelectItem></SelectItem>

@foreach(var item in UserProfilesCollection)
{
	<SelectItem TValue="Guid" Value="@item.Id">
		@item.DisplayName
	</SelectItem>
}

</Select>                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["NotificationType"]</FieldLabel>
                        <Select TValue="Guid?"
		SelectedValue="@Filter.NotificationTypeId"
		SelectedValueChanged="@OnNotificationTypeIdChangedAsync">

<SelectItem></SelectItem>

@foreach(var item in NotificationTypesCollection)
{
	<SelectItem TValue="Guid" Value="@item.Id">
		@item.DisplayName
	</SelectItem>
}

</Select>                       
                    </Field>
                </Column>
            </Row>
@*//<suite-custom-code-block-2>*@
@*//</suite-custom-code-block-2>*@
        </div>

        </Row>

@*//<suite-custom-code-block-3>*@
@*//</suite-custom-code-block-3>*@
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>        
        @if (SelectedNotifications.Any())
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                @if (AllNotificationsSelected)
                {
                    <p class="lead mb-0">
                        @L["AllItemsAreSelected", TotalCount]
                    </p>
                }
                else
                {
                    <p class="lead mb-0">
                        @if (SelectedNotifications.Count > 1)
                        {
                            @L["NumberOfItemsOnThisPageAreSelected", SelectedNotifications.Count]
                        }
                        else
                        {
                            @L["OneItemOnThisPageIsSelected"]
                        }
                    </p>
                }
                    
                <div>
                    @if ((SelectedNotifications.Count == PageSize || SelectedNotifications.Count == NotificationList.Count) && TotalCount > SelectedNotifications.Count)
                    {
                        if (!AllNotificationsSelected)
                        {
                            <Button Clicked="SelectAllItems" Class="mx-1 btn-outline-secondary">@L["SelectAllItems", TotalCount]</Button>
                        }
                        else
                        {
                            <Button Clicked="ClearSelection" Class="mx-1 btn-outline-secondary">@L["ClearSelection"]</Button>
                        }
                    }
                    
                    <Button Color="Color.Danger" Class="mx-1" Size="Size.Medium" Clicked="DeleteSelectedNotificationsAsync">
                        <Icon Name="@IconName.Delete" /> @L["Delete"]
                    </Button>
                </div>
            </div>
            
            <hr class="my-1 mx-0"/>
        }
        <DataGrid TItem="NotificationWithNavigationPropertiesDto"
                  Data="NotificationList"
                  
                  SelectionMode="DataGridSelectionMode.Multiple"
                  SelectedRows="SelectedNotifications"
                  RowSelectable="@((args) => CanDeleteNotification)"
                  SelectedRowsChanged="SelectedNotificationRowsChanged"
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                       <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>   
            <DataGridColumns>
                
                @if (CanDeleteNotification && NotificationList.Any())
                {
                    <DataGridMultiSelectColumn TItem="NotificationWithNavigationPropertiesDto" DisplayOrder="-1" Width="30px"></DataGridMultiSelectColumn>
                }
                
                <DataGridEntityActionsColumn TItem="NotificationWithNavigationPropertiesDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="NotificationWithNavigationPropertiesDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="NotificationWithNavigationPropertiesDto"
                                          Visible="@CanEditNotification"
                                          Clicked="async () => await OpenEditNotificationModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="NotificationWithNavigationPropertiesDto"
                                          Visible="@CanDeleteNotification"
                                          Clicked="() => DeleteNotificationAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
@*//<suite-custom-code-block-4>*@
@*//</suite-custom-code-block-4>*@
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="Notification.Title"
                      Caption="@L["Title"]">
              </DataGridColumn>

              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="Notification.Message"
                      Caption="@L["Message"]">
              </DataGridColumn>

              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="Notification.IsRead"
                      Caption="@L["IsRead"]">
                    <DisplayTemplate>
                        @if (context.Notification.IsRead)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="Notification.ReadDate"
                      Caption="@L["ReadDate"]">
                  <DisplayTemplate>
                        @(context.Notification.ReadDate.HasValue ? context.Notification.ReadDate.Value.ToShortDateString() : string.Empty)
                  </DisplayTemplate>
              </DataGridColumn>

              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="Notification.Priority"
                      Caption="@L["Priority"]">
              </DataGridColumn>

              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="Notification.SourceEntityType"
                      Caption="@L["SourceEntityType"]">
                    <DisplayTemplate>
                        @L[$"Enum:SourceEntityType.{(int)context.Notification.SourceEntityType}"]
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="Notification.SourceEntityId"
                      Caption="@L["SourceEntityId"]">
              </DataGridColumn>

              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="Notification.SenderUserId"
                      Caption="@L["SenderUserId"]">
              </DataGridColumn>

              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="UserProfile.SecurityNumber"
                      Caption="@L["UserProfile"]">
              </DataGridColumn>

              <DataGridColumn TItem="NotificationWithNavigationPropertiesDto"
                      Field="NotificationType.Title"
                      Caption="@L["NotificationType"]">
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateNotificationModal" Closing="@CreateNotificationModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-5>*@
@*//</suite-custom-code-block-5>*@
        <Form id="CreateNotificationForm">
            <ModalHeader>
                <ModalTitle>@L["NewNotification"]</ModalTitle>
                <CloseButton Clicked="CloseCreateNotificationModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewNotificationValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewNotification"
                            ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewNotification.Title"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Message"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewNotification.Message"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewNotification.IsRead" >@L["IsRead"]</Check>
                    </Field>

                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ReadDate"]</FieldLabel>
                            <DateEdit TValue="DateTime?" InputMode="DateInputMode.Date" @bind-Date="@NewNotification.ReadDate" >
                               <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </DateEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Priority"]</FieldLabel>
                            <NumericPicker TValue="int?" @bind-Value="@NewNotification.Priority"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <FieldLabel>@L["SourceEntityType"]</FieldLabel>
                        <Select TValue="SourceEntityType" @bind-SelectedValue="@NewNotification.SourceEntityType" >
                            @foreach (var itemValue in Enum.GetValues(typeof(SourceEntityType)))
                            {
                                <SelectItem TValue="SourceEntityType" Value="@((SourceEntityType) itemValue)">
                                    @L[$"Enum:SourceEntityType.{((SourceEntityType) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["SourceEntityId"]</FieldLabel>
                            <TextEdit @bind-Text="@NewNotification.SourceEntityId"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["SenderUserId"]</FieldLabel>
                            <TextEdit @bind-Text="@NewNotification.SenderUserId"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["UserProfile"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@NewNotification.UserProfileId">
                            @foreach (var userProfile in UserProfilesCollection)
                            {
                                <SelectItem TValue="Guid" Value="@(userProfile.Id)">
                                    @(userProfile.DisplayName)
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Field>
                        <FieldLabel>@L["NotificationType"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@NewNotification.NotificationTypeId">
                            @foreach (var notificationType in NotificationTypesCollection)
                            {
                                <SelectItem TValue="Guid" Value="@(notificationType.Id)">
                                    @(notificationType.DisplayName)
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateNotificationModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateNotificationForm" Clicked="CreateNotificationAsync"/>
@*//<suite-custom-code-block-6>*@
@*//</suite-custom-code-block-6>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-7>*@
@*//</suite-custom-code-block-7>*@
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditNotificationModal" Closing="@EditNotificationModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-8>*@
@*//</suite-custom-code-block-8>*@
        <Form id="EditNotificationForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditNotificationModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingNotificationValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingNotification"
                            ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Title"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingNotification.Title"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Message"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingNotification.Message"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingNotification.IsRead" >@L["IsRead"]</Check>
                    </Field>

                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ReadDate"]</FieldLabel>
                            <DateEdit TValue="DateTime?" InputMode="DateInputMode.Date" @bind-Date="@EditingNotification.ReadDate" >
                               <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </DateEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Priority"]</FieldLabel>
                            <NumericPicker TValue="int?" @bind-Value="@EditingNotification.Priority"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <FieldLabel>@L["SourceEntityType"]</FieldLabel>
                        <Select TValue="SourceEntityType" @bind-SelectedValue="@EditingNotification.SourceEntityType" >
                            @foreach (var itemValue in Enum.GetValues(typeof(SourceEntityType)))
                            {
                                <SelectItem TValue="SourceEntityType" Value="@((SourceEntityType) itemValue)">
                                    @L[$"Enum:SourceEntityType.{((SourceEntityType) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["SourceEntityId"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingNotification.SourceEntityId"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["SenderUserId"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingNotification.SenderUserId"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["UserProfile"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@EditingNotification.UserProfileId">
                            @foreach (var userProfile in UserProfilesCollection)
                            {
                                <SelectItem TValue="Guid" Value="@(userProfile.Id)">
                                    @(userProfile.DisplayName)
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Field>
                        <FieldLabel>@L["NotificationType"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@EditingNotification.NotificationTypeId">
                            @foreach (var notificationType in NotificationTypesCollection)
                            {
                                <SelectItem TValue="Guid" Value="@(notificationType.Id)">
                                    @(notificationType.DisplayName)
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditNotificationModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditNotificationForm" Clicked="UpdateNotificationAsync" />
@*//<suite-custom-code-block-9>*@
@*//</suite-custom-code-block-9>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-10>*@
@*//</suite-custom-code-block-10>*@
    </ModalContent>
</Modal>

